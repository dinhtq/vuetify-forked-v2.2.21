// Mixins
import DatePickerTable from './mixins/date-picker-table';
// Utils
import { pad, createNativeLocaleFormatter } from './util';
import mixins from '../../util/mixins';
export default mixins(DatePickerTable
/* @vue/component */
).extend({
    name: 'v-date-picker-month-table',
    computed: {
        formatter() {
            return this.format || createNativeLocaleFormatter(this.currentLocale, { month: 'short', timeZone: 'UTC' }, { start: 5, length: 2 });
        },
    },
    methods: {
        calculateTableDate(delta) {
            return `${parseInt(this.tableDate, 10) + Math.sign(delta || 1)}`;
        },
        genTBody() {
            const children = [];
            const cols = Array(3).fill(null);
            const rows = 12 / cols.length;
            for (let row = 0; row < rows; row++) {
                const tds = cols.map((_, col) => {
                    const month = row * cols.length + col;
                    const date = `${this.displayedYear}-${pad(month + 1)}`;
                    return this.$createElement('td', {
                        key: month,
                    }, [
                        this.genButton(date, false, 'month', this.formatter),
                    ]);
                });
                children.push(this.$createElement('tr', {
                    key: row,
                }, tds));
            }
            return this.$createElement('tbody', children);
        },
    },
    render() {
        return this.genTable('v-date-picker-table v-date-picker-table--month', [
            this.genTBody(),
        ], this.calculateTableDate);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkRhdGVQaWNrZXJNb250aFRhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkRhdGVQaWNrZXIvVkRhdGVQaWNrZXJNb250aFRhYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVM7QUFDVCxPQUFPLGVBQWUsTUFBTSw0QkFBNEIsQ0FBQTtBQUV4RCxRQUFRO0FBQ1IsT0FBTyxFQUFFLEdBQUcsRUFBRSwyQkFBMkIsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUN6RCxPQUFPLE1BQU0sTUFBTSxtQkFBbUIsQ0FBQTtBQU10QyxlQUFlLE1BQU0sQ0FDbkIsZUFBZTtBQUNqQixvQkFBb0I7Q0FDbkIsQ0FBQyxNQUFNLENBQUM7SUFDUCxJQUFJLEVBQUUsMkJBQTJCO0lBRWpDLFFBQVEsRUFBRTtRQUNSLFNBQVM7WUFDUCxPQUFPLElBQUksQ0FBQyxNQUFNLElBQUksMkJBQTJCLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUNySSxDQUFDO0tBQ0Y7SUFFRCxPQUFPLEVBQUU7UUFDUCxrQkFBa0IsQ0FBRSxLQUFhO1lBQy9CLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFBO1FBQ2xFLENBQUM7UUFDRCxRQUFRO1lBQ04sTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO1lBQ25CLE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDaEMsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7WUFFN0IsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDbkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsRUFBRTtvQkFDOUIsTUFBTSxLQUFLLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFBO29CQUNyQyxNQUFNLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLElBQUksR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFBO29CQUN0RCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFO3dCQUMvQixHQUFHLEVBQUUsS0FBSztxQkFDWCxFQUFFO3dCQUNELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztxQkFDckQsQ0FBQyxDQUFBO2dCQUNKLENBQUMsQ0FBQyxDQUFBO2dCQUVGLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUU7b0JBQ3RDLEdBQUcsRUFBRSxHQUFHO2lCQUNULEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTthQUNUO1lBRUQsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUMvQyxDQUFDO0tBQ0Y7SUFFRCxNQUFNO1FBQ0osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGdEQUFnRCxFQUFFO1lBQ3JFLElBQUksQ0FBQyxRQUFRLEVBQUU7U0FDaEIsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUM3QixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTWl4aW5zXG5pbXBvcnQgRGF0ZVBpY2tlclRhYmxlIGZyb20gJy4vbWl4aW5zL2RhdGUtcGlja2VyLXRhYmxlJ1xuXG4vLyBVdGlsc1xuaW1wb3J0IHsgcGFkLCBjcmVhdGVOYXRpdmVMb2NhbGVGb3JtYXR0ZXIgfSBmcm9tICcuL3V0aWwnXG5pbXBvcnQgbWl4aW5zIGZyb20gJy4uLy4uL3V0aWwvbWl4aW5zJ1xuXG4vLyBUeXBlc1xuaW1wb3J0IHsgVk5vZGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEYXRlUGlja2VyRm9ybWF0dGVyIH0gZnJvbSAndHlwZXMnXG5cbmV4cG9ydCBkZWZhdWx0IG1peGlucyhcbiAgRGF0ZVBpY2tlclRhYmxlXG4vKiBAdnVlL2NvbXBvbmVudCAqL1xuKS5leHRlbmQoe1xuICBuYW1lOiAndi1kYXRlLXBpY2tlci1tb250aC10YWJsZScsXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBmb3JtYXR0ZXIgKCk6IERhdGVQaWNrZXJGb3JtYXR0ZXIge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0IHx8IGNyZWF0ZU5hdGl2ZUxvY2FsZUZvcm1hdHRlcih0aGlzLmN1cnJlbnRMb2NhbGUsIHsgbW9udGg6ICdzaG9ydCcsIHRpbWVab25lOiAnVVRDJyB9LCB7IHN0YXJ0OiA1LCBsZW5ndGg6IDIgfSlcbiAgICB9LFxuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBjYWxjdWxhdGVUYWJsZURhdGUgKGRlbHRhOiBudW1iZXIpIHtcbiAgICAgIHJldHVybiBgJHtwYXJzZUludCh0aGlzLnRhYmxlRGF0ZSwgMTApICsgTWF0aC5zaWduKGRlbHRhIHx8IDEpfWBcbiAgICB9LFxuICAgIGdlblRCb2R5ICgpIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gW11cbiAgICAgIGNvbnN0IGNvbHMgPSBBcnJheSgzKS5maWxsKG51bGwpXG4gICAgICBjb25zdCByb3dzID0gMTIgLyBjb2xzLmxlbmd0aFxuXG4gICAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCByb3dzOyByb3crKykge1xuICAgICAgICBjb25zdCB0ZHMgPSBjb2xzLm1hcCgoXywgY29sKSA9PiB7XG4gICAgICAgICAgY29uc3QgbW9udGggPSByb3cgKiBjb2xzLmxlbmd0aCArIGNvbFxuICAgICAgICAgIGNvbnN0IGRhdGUgPSBgJHt0aGlzLmRpc3BsYXllZFllYXJ9LSR7cGFkKG1vbnRoICsgMSl9YFxuICAgICAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0ZCcsIHtcbiAgICAgICAgICAgIGtleTogbW9udGgsXG4gICAgICAgICAgfSwgW1xuICAgICAgICAgICAgdGhpcy5nZW5CdXR0b24oZGF0ZSwgZmFsc2UsICdtb250aCcsIHRoaXMuZm9ybWF0dGVyKSxcbiAgICAgICAgICBdKVxuICAgICAgICB9KVxuXG4gICAgICAgIGNoaWxkcmVuLnB1c2godGhpcy4kY3JlYXRlRWxlbWVudCgndHInLCB7XG4gICAgICAgICAga2V5OiByb3csXG4gICAgICAgIH0sIHRkcykpXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCd0Ym9keScsIGNoaWxkcmVuKVxuICAgIH0sXG4gIH0sXG5cbiAgcmVuZGVyICgpOiBWTm9kZSB7XG4gICAgcmV0dXJuIHRoaXMuZ2VuVGFibGUoJ3YtZGF0ZS1waWNrZXItdGFibGUgdi1kYXRlLXBpY2tlci10YWJsZS0tbW9udGgnLCBbXG4gICAgICB0aGlzLmdlblRCb2R5KCksXG4gICAgXSwgdGhpcy5jYWxjdWxhdGVUYWJsZURhdGUpXG4gIH0sXG59KVxuIl19