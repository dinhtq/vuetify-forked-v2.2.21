// Types
import Vue from 'vue';
// Utils
import { getObjectValueByPath } from '../../util/helpers';
export default Vue.extend({
    name: 'row',
    functional: true,
    props: {
        headers: Array,
        item: Object,
        rtl: Boolean,
    },
    render(h, { props, slots, data }) {
        const computedSlots = slots();
        const columns = props.headers.map((header) => {
            const children = [];
            const value = getObjectValueByPath(props.item, header.value);
            const slotName = header.value;
            const scopedSlot = data.scopedSlots && data.scopedSlots[slotName];
            const regularSlot = computedSlots[slotName];
            if (scopedSlot) {
                children.push(scopedSlot({ item: props.item, header, value }));
            }
            else if (regularSlot) {
                children.push(regularSlot);
            }
            else {
                children.push(value == null ? value : String(value));
            }
            const textAlign = `text-${header.align || 'start'}`;
            return h('td', {
                class: {
                    [textAlign]: true,
                    'v-data-table__divider': header.divider,
                },
            }, children);
        });
        return h('tr', data, columns);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm93LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkRhdGFUYWJsZS9Sb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsUUFBUTtBQUNSLE9BQU8sR0FBd0IsTUFBTSxLQUFLLENBQUE7QUFHMUMsUUFBUTtBQUNSLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRXpELGVBQWUsR0FBRyxDQUFDLE1BQU0sQ0FBQztJQUN4QixJQUFJLEVBQUUsS0FBSztJQUVYLFVBQVUsRUFBRSxJQUFJO0lBRWhCLEtBQUssRUFBRTtRQUNMLE9BQU8sRUFBRSxLQUFvQztRQUM3QyxJQUFJLEVBQUUsTUFBTTtRQUNaLEdBQUcsRUFBRSxPQUFPO0tBQ2I7SUFFRCxNQUFNLENBQUUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7UUFDL0IsTUFBTSxhQUFhLEdBQUcsS0FBSyxFQUFFLENBQUE7UUFFN0IsTUFBTSxPQUFPLEdBQVksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUF1QixFQUFFLEVBQUU7WUFDckUsTUFBTSxRQUFRLEdBQUcsRUFBRSxDQUFBO1lBQ25CLE1BQU0sS0FBSyxHQUFHLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBRTVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUE7WUFDN0IsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1lBQ2pFLE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUUzQyxJQUFJLFVBQVUsRUFBRTtnQkFDZCxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDL0Q7aUJBQU0sSUFBSSxXQUFXLEVBQUU7Z0JBQ3RCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7YUFDM0I7aUJBQU07Z0JBQ0wsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO2FBQ3JEO1lBRUQsTUFBTSxTQUFTLEdBQUcsUUFBUSxNQUFNLENBQUMsS0FBSyxJQUFJLE9BQU8sRUFBRSxDQUFBO1lBRW5ELE9BQU8sQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDYixLQUFLLEVBQUU7b0JBQ0wsQ0FBQyxTQUFTLENBQUMsRUFBRSxJQUFJO29CQUNqQix1QkFBdUIsRUFBRSxNQUFNLENBQUMsT0FBTztpQkFDeEM7YUFDRixFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ2QsQ0FBQyxDQUFDLENBQUE7UUFFRixPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQy9CLENBQUM7Q0FDRixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUeXBlc1xuaW1wb3J0IFZ1ZSwgeyBWTm9kZSwgUHJvcFR5cGUgfSBmcm9tICd2dWUnXG5pbXBvcnQgeyBEYXRhVGFibGVIZWFkZXIgfSBmcm9tICd0eXBlcydcblxuLy8gVXRpbHNcbmltcG9ydCB7IGdldE9iamVjdFZhbHVlQnlQYXRoIH0gZnJvbSAnLi4vLi4vdXRpbC9oZWxwZXJzJ1xuXG5leHBvcnQgZGVmYXVsdCBWdWUuZXh0ZW5kKHtcbiAgbmFtZTogJ3JvdycsXG5cbiAgZnVuY3Rpb25hbDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGhlYWRlcnM6IEFycmF5IGFzIFByb3BUeXBlPERhdGFUYWJsZUhlYWRlcltdPixcbiAgICBpdGVtOiBPYmplY3QsXG4gICAgcnRsOiBCb29sZWFuLFxuICB9LFxuXG4gIHJlbmRlciAoaCwgeyBwcm9wcywgc2xvdHMsIGRhdGEgfSk6IFZOb2RlIHtcbiAgICBjb25zdCBjb21wdXRlZFNsb3RzID0gc2xvdHMoKVxuXG4gICAgY29uc3QgY29sdW1uczogVk5vZGVbXSA9IHByb3BzLmhlYWRlcnMubWFwKChoZWFkZXI6IERhdGFUYWJsZUhlYWRlcikgPT4ge1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBbXVxuICAgICAgY29uc3QgdmFsdWUgPSBnZXRPYmplY3RWYWx1ZUJ5UGF0aChwcm9wcy5pdGVtLCBoZWFkZXIudmFsdWUpXG5cbiAgICAgIGNvbnN0IHNsb3ROYW1lID0gaGVhZGVyLnZhbHVlXG4gICAgICBjb25zdCBzY29wZWRTbG90ID0gZGF0YS5zY29wZWRTbG90cyAmJiBkYXRhLnNjb3BlZFNsb3RzW3Nsb3ROYW1lXVxuICAgICAgY29uc3QgcmVndWxhclNsb3QgPSBjb21wdXRlZFNsb3RzW3Nsb3ROYW1lXVxuXG4gICAgICBpZiAoc2NvcGVkU2xvdCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKHNjb3BlZFNsb3QoeyBpdGVtOiBwcm9wcy5pdGVtLCBoZWFkZXIsIHZhbHVlIH0pKVxuICAgICAgfSBlbHNlIGlmIChyZWd1bGFyU2xvdCkge1xuICAgICAgICBjaGlsZHJlbi5wdXNoKHJlZ3VsYXJTbG90KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaCh2YWx1ZSA9PSBudWxsID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpKVxuICAgICAgfVxuXG4gICAgICBjb25zdCB0ZXh0QWxpZ24gPSBgdGV4dC0ke2hlYWRlci5hbGlnbiB8fCAnc3RhcnQnfWBcblxuICAgICAgcmV0dXJuIGgoJ3RkJywge1xuICAgICAgICBjbGFzczoge1xuICAgICAgICAgIFt0ZXh0QWxpZ25dOiB0cnVlLFxuICAgICAgICAgICd2LWRhdGEtdGFibGVfX2RpdmlkZXInOiBoZWFkZXIuZGl2aWRlcixcbiAgICAgICAgfSxcbiAgICAgIH0sIGNoaWxkcmVuKVxuICAgIH0pXG5cbiAgICByZXR1cm4gaCgndHInLCBkYXRhLCBjb2x1bW5zKVxuICB9LFxufSlcbiJdfQ==