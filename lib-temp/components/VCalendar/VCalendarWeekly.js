// Styles
import './VCalendarWeekly.sass';
// Components
import VBtn from '../VBtn';
// Mixins
import CalendarBase from './mixins/calendar-base';
// Util
import { getSlot } from '../../util/helpers';
import props from './util/props';
import { createDayList, getDayIdentifier, createNativeLocaleFormatter, } from './util/timestamp';
/* @vue/component */
export default CalendarBase.extend({
    name: 'v-calendar-weekly',
    props: props.weeks,
    computed: {
        staticClass() {
            return 'v-calendar-weekly';
        },
        classes() {
            return this.themeClasses;
        },
        parsedMinWeeks() {
            return parseInt(this.minWeeks);
        },
        days() {
            const minDays = this.parsedMinWeeks * this.parsedWeekdays.length;
            const start = this.getStartOfWeek(this.parsedStart);
            const end = this.getEndOfWeek(this.parsedEnd);
            return createDayList(start, end, this.times.today, this.weekdaySkips, Number.MAX_SAFE_INTEGER, minDays);
        },
        todayWeek() {
            const today = this.times.today;
            const start = this.getStartOfWeek(today);
            const end = this.getEndOfWeek(today);
            return createDayList(start, end, today, this.weekdaySkips, this.parsedWeekdays.length, this.parsedWeekdays.length);
        },
        monthFormatter() {
            if (this.monthFormat) {
                return this.monthFormat;
            }
            const longOptions = { timeZone: 'UTC', month: 'long' };
            const shortOptions = { timeZone: 'UTC', month: 'short' };
            return createNativeLocaleFormatter(this.currentLocale, (_tms, short) => short ? shortOptions : longOptions);
        },
    },
    methods: {
        isOutside(day) {
            const dayIdentifier = getDayIdentifier(day);
            return dayIdentifier < getDayIdentifier(this.parsedStart) ||
                dayIdentifier > getDayIdentifier(this.parsedEnd);
        },
        genHead() {
            return this.$createElement('div', {
                staticClass: 'v-calendar-weekly__head',
            }, this.genHeadDays());
        },
        genHeadDays() {
            return this.todayWeek.map(this.genHeadDay);
        },
        genHeadDay(day, index) {
            const outside = this.isOutside(this.days[index]);
            const color = day.present ? this.color : undefined;
            return this.$createElement('div', this.setTextColor(color, {
                key: day.date,
                staticClass: 'v-calendar-weekly__head-weekday',
                class: this.getRelativeClasses(day, outside),
            }), this.weekdayFormatter(day, this.shortWeekdays));
        },
        genWeeks() {
            const days = this.days;
            const weekDays = this.parsedWeekdays.length;
            const weeks = [];
            for (let i = 0; i < days.length; i += weekDays) {
                weeks.push(this.genWeek(days.slice(i, i + weekDays)));
            }
            return weeks;
        },
        genWeek(week) {
            return this.$createElement('div', {
                key: week[0].date,
                staticClass: 'v-calendar-weekly__week',
            }, week.map((day, index) => this.genDay(day, index, week)));
        },
        genDay(day, index, week) {
            const outside = this.isOutside(day);
            return this.$createElement('div', {
                key: day.date,
                staticClass: 'v-calendar-weekly__day',
                class: this.getRelativeClasses(day, outside),
                on: this.getDefaultMouseEventHandlers(':day', _e => day),
            }, [
                this.genDayLabel(day),
                ...(getSlot(this, 'day', () => ({ outside, index, week, ...day })) || []),
            ]);
        },
        genDayLabel(day) {
            return this.$createElement('div', {
                staticClass: 'v-calendar-weekly__day-label',
            }, getSlot(this, 'day-label', day) || [this.genDayLabelButton(day)]);
        },
        genDayLabelButton(day) {
            const color = day.present ? this.color : 'transparent';
            const hasMonth = day.day === 1 && this.showMonthOnFirst;
            return this.$createElement(VBtn, {
                props: {
                    color,
                    fab: true,
                    depressed: true,
                    small: true,
                },
                on: this.getMouseEventHandlers({
                    'click:date': { event: 'click', stop: true },
                    'contextmenu:date': { event: 'contextmenu', stop: true, prevent: true, result: false },
                }, _e => day),
            }, hasMonth
                ? this.monthFormatter(day, this.shortMonths) + ' ' + this.dayFormatter(day, false)
                : this.dayFormatter(day, false));
        },
        genDayMonth(day) {
            const color = day.present ? this.color : undefined;
            return this.$createElement('div', this.setTextColor(color, {
                staticClass: 'v-calendar-weekly__day-month',
            }), getSlot(this, 'day-month', day) || this.monthFormatter(day, this.shortMonths));
        },
    },
    render(h) {
        return h('div', {
            staticClass: this.staticClass,
            class: this.classes,
            nativeOn: {
                dragstart: (e) => {
                    e.preventDefault();
                },
            },
        }, [
            !this.hideHeader ? this.genHead() : '',
            ...this.genWeeks(),
        ]);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVkNhbGVuZGFyV2Vla2x5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkNhbGVuZGFyL1ZDYWxlbmRhcldlZWtseS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxTQUFTO0FBQ1QsT0FBTyx3QkFBd0IsQ0FBQTtBQUsvQixhQUFhO0FBQ2IsT0FBTyxJQUFJLE1BQU0sU0FBUyxDQUFBO0FBRTFCLFNBQVM7QUFDVCxPQUFPLFlBQVksTUFBTSx3QkFBd0IsQ0FBQTtBQUVqRCxPQUFPO0FBQ1AsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBQzVDLE9BQU8sS0FBSyxNQUFNLGNBQWMsQ0FBQTtBQUNoQyxPQUFPLEVBQ0wsYUFBYSxFQUNiLGdCQUFnQixFQUNoQiwyQkFBMkIsR0FDNUIsTUFBTSxrQkFBa0IsQ0FBQTtBQUd6QixvQkFBb0I7QUFDcEIsZUFBZSxZQUFZLENBQUMsTUFBTSxDQUFDO0lBQ2pDLElBQUksRUFBRSxtQkFBbUI7SUFFekIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO0lBRWxCLFFBQVEsRUFBRTtRQUNSLFdBQVc7WUFDVCxPQUFPLG1CQUFtQixDQUFBO1FBQzVCLENBQUM7UUFDRCxPQUFPO1lBQ0wsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFBO1FBQzFCLENBQUM7UUFDRCxjQUFjO1lBQ1osT0FBTyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ2hDLENBQUM7UUFDRCxJQUFJO1lBQ0YsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQTtZQUNoRSxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUNuRCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FB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QyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3RDLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRTtTQUNuQixDQUFDLENBQUE7SUFDSixDQUFDO0NBQ0YsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gU3R5bGVzXG5pbXBvcnQgJy4vVkNhbGVuZGFyV2Vla2x5LnNhc3MnXG5cbi8vIFR5cGVzXG5pbXBvcnQgeyBWTm9kZSB9IGZyb20gJ3Z1ZSdcblxuLy8gQ29tcG9uZW50c1xuaW1wb3J0IFZCdG4gZnJvbSAnLi4vVkJ0bidcblxuLy8gTWl4aW5zXG5pbXBvcnQgQ2FsZW5kYXJCYXNlIGZyb20gJy4vbWl4aW5zL2NhbGVuZGFyLWJhc2UnXG5cbi8vIFV0aWxcbmltcG9ydCB7IGdldFNsb3QgfSBmcm9tICcuLi8uLi91dGlsL2hlbHBlcnMnXG5pbXBvcnQgcHJvcHMgZnJvbSAnLi91dGlsL3Byb3BzJ1xuaW1wb3J0IHtcbiAgY3JlYXRlRGF5TGlzdCxcbiAgZ2V0RGF5SWRlbnRpZmllcixcbiAgY3JlYXRlTmF0aXZlTG9jYWxlRm9ybWF0dGVyLFxufSBmcm9tICcuL3V0aWwvdGltZXN0YW1wJ1xuaW1wb3J0IHsgQ2FsZW5kYXJUaW1lc3RhbXAsIENhbGVuZGFyRm9ybWF0dGVyIH0gZnJvbSAndHlwZXMnXG5cbi8qIEB2dWUvY29tcG9uZW50ICovXG5leHBvcnQgZGVmYXVsdCBDYWxlbmRhckJhc2UuZXh0ZW5kKHtcbiAgbmFtZTogJ3YtY2FsZW5kYXItd2Vla2x5JyxcblxuICBwcm9wczogcHJvcHMud2Vla3MsXG5cbiAgY29tcHV0ZWQ6IHtcbiAgICBzdGF0aWNDbGFzcyAoKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiAndi1jYWxlbmRhci13ZWVrbHknXG4gICAgfSxcbiAgICBjbGFzc2VzICgpOiBvYmplY3Qge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbWVDbGFzc2VzXG4gICAgfSxcbiAgICBwYXJzZWRNaW5XZWVrcyAoKTogbnVtYmVyIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLm1pbldlZWtzKVxuICAgIH0sXG4gICAgZGF5cyAoKTogQ2FsZW5kYXJUaW1lc3RhbXBbXSB7XG4gICAgICBjb25zdCBtaW5EYXlzID0gdGhpcy5wYXJzZWRNaW5XZWVrcyAqIHRoaXMucGFyc2VkV2Vla2RheXMubGVuZ3RoXG4gICAgICBjb25zdCBzdGFydCA9IHRoaXMuZ2V0U3RhcnRPZldlZWsodGhpcy5wYXJzZWRTdGFydClcbiAgICAgIGNvbnN0IGVuZCA9IHRoaXMuZ2V0RW5kT2ZXZWVrKHRoaXMucGFyc2VkRW5kKVxuXG4gICAgICByZXR1cm4gY3JlYXRlRGF5TGlzdChcbiAgICAgICAgc3RhcnQsXG4gICAgICAgIGVuZCxcbiAgICAgICAgdGhpcy50aW1lcy50b2RheSxcbiAgICAgICAgdGhpcy53ZWVrZGF5U2tpcHMsXG4gICAgICAgIE51bWJlci5NQVhfU0FGRV9JTlRFR0VSLFxuICAgICAgICBtaW5EYXlzXG4gICAgICApXG4gICAgfSxcbiAgICB0b2RheVdlZWsgKCk6IENhbGVuZGFyVGltZXN0YW1wW10ge1xuICAgICAgY29uc3QgdG9kYXkgPSB0aGlzLnRpbWVzLnRvZGF5XG4gICAgICBjb25zdCBzdGFydCA9IHRoaXMuZ2V0U3RhcnRPZldlZWsodG9kYXkpXG4gICAgICBjb25zdCBlbmQgPSB0aGlzLmdldEVuZE9mV2Vlayh0b2RheSlcblxuICAgICAgcmV0dXJuIGNyZWF0ZURheUxpc3QoXG4gICAgICAgIHN0YXJ0LFxuICAgICAgICBlbmQsXG4gICAgICAgIHRvZGF5LFxuICAgICAgICB0aGlzLndlZWtkYXlTa2lwcyxcbiAgICAgICAgdGhpcy5wYXJzZWRXZWVrZGF5cy5sZW5ndGgsXG4gICAgICAgIHRoaXMucGFyc2VkV2Vla2RheXMubGVuZ3RoXG4gICAgICApXG4gICAgfSxcbiAgICBtb250aEZvcm1hdHRlciAoKTogQ2FsZW5kYXJGb3JtYXR0ZXIge1xuICAgICAgaWYgKHRoaXMubW9udGhGb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9udGhGb3JtYXQgYXMgQ2FsZW5kYXJGb3JtYXR0ZXJcbiAgICAgIH1cblxuICAgICAgY29uc3QgbG9uZ09wdGlvbnMgPSB7IHRpbWVab25lOiAnVVRDJywgbW9udGg6ICdsb25nJyB9XG4gICAgICBjb25zdCBzaG9ydE9wdGlvbnMgPSB7IHRpbWVab25lOiAnVVRDJywgbW9udGg6ICdzaG9ydCcgfVxuXG4gICAgICByZXR1cm4gY3JlYXRlTmF0aXZlTG9jYWxlRm9ybWF0dGVyKFxuICAgICAgICB0aGlzLmN1cnJlbnRMb2NhbGUsXG4gICAgICAgIChfdG1zLCBzaG9ydCkgPT4gc2hvcnQgPyBzaG9ydE9wdGlvbnMgOiBsb25nT3B0aW9uc1xuICAgICAgKVxuICAgIH0sXG4gIH0sXG5cbiAgbWV0aG9kczoge1xuICAgIGlzT3V0c2lkZSAoZGF5OiBDYWxlbmRhclRpbWVzdGFtcCk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgZGF5SWRlbnRpZmllciA9IGdldERheUlkZW50aWZpZXIoZGF5KVxuXG4gICAgICByZXR1cm4gZGF5SWRlbnRpZmllciA8IGdldERheUlkZW50aWZpZXIodGhpcy5wYXJzZWRTdGFydCkgfHxcbiAgICAgICAgICAgICBkYXlJZGVudGlmaWVyID4gZ2V0RGF5SWRlbnRpZmllcih0aGlzLnBhcnNlZEVuZClcbiAgICB9LFxuICAgIGdlbkhlYWQgKCk6IFZOb2RlIHtcbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiAndi1jYWxlbmRhci13ZWVrbHlfX2hlYWQnLFxuICAgICAgfSwgdGhpcy5nZW5IZWFkRGF5cygpKVxuICAgIH0sXG4gICAgZ2VuSGVhZERheXMgKCk6IFZOb2RlW10ge1xuICAgICAgcmV0dXJuIHRoaXMudG9kYXlXZWVrLm1hcCh0aGlzLmdlbkhlYWREYXkpXG4gICAgfSxcbiAgICBnZW5IZWFkRGF5IChkYXk6IENhbGVuZGFyVGltZXN0YW1wLCBpbmRleDogbnVtYmVyKTogVk5vZGUge1xuICAgICAgY29uc3Qgb3V0c2lkZSA9IHRoaXMuaXNPdXRzaWRlKHRoaXMuZGF5c1tpbmRleF0pXG4gICAgICBjb25zdCBjb2xvciA9IGRheS5wcmVzZW50ID8gdGhpcy5jb2xvciA6IHVuZGVmaW5lZFxuXG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgdGhpcy5zZXRUZXh0Q29sb3IoY29sb3IsIHtcbiAgICAgICAga2V5OiBkYXkuZGF0ZSxcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWNhbGVuZGFyLXdlZWtseV9faGVhZC13ZWVrZGF5JyxcbiAgICAgICAgY2xhc3M6IHRoaXMuZ2V0UmVsYXRpdmVDbGFzc2VzKGRheSwgb3V0c2lkZSksXG4gICAgICB9KSwgdGhpcy53ZWVrZGF5Rm9ybWF0dGVyKGRheSwgdGhpcy5zaG9ydFdlZWtkYXlzKSlcbiAgICB9LFxuICAgIGdlbldlZWtzICgpOiBWTm9kZVtdIHtcbiAgICAgIGNvbnN0IGRheXMgPSB0aGlzLmRheXNcbiAgICAgIGNvbnN0IHdlZWtEYXlzID0gdGhpcy5wYXJzZWRXZWVrZGF5cy5sZW5ndGhcbiAgICAgIGNvbnN0IHdlZWtzOiBWTm9kZVtdID0gW11cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF5cy5sZW5ndGg7IGkgKz0gd2Vla0RheXMpIHtcbiAgICAgICAgd2Vla3MucHVzaCh0aGlzLmdlbldlZWsoZGF5cy5zbGljZShpLCBpICsgd2Vla0RheXMpKSlcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHdlZWtzXG4gICAgfSxcbiAgICBnZW5XZWVrICh3ZWVrOiBDYWxlbmRhclRpbWVzdGFtcFtdKTogVk5vZGUge1xuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAga2V5OiB3ZWVrWzBdLmRhdGUsXG4gICAgICAgIHN0YXRpY0NsYXNzOiAndi1jYWxlbmRhci13ZWVrbHlfX3dlZWsnLFxuICAgICAgfSwgd2Vlay5tYXAoKGRheSwgaW5kZXgpID0+IHRoaXMuZ2VuRGF5KGRheSwgaW5kZXgsIHdlZWspKSlcbiAgICB9LFxuICAgIGdlbkRheSAoZGF5OiBDYWxlbmRhclRpbWVzdGFtcCwgaW5kZXg6IG51bWJlciwgd2VlazogQ2FsZW5kYXJUaW1lc3RhbXBbXSk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IG91dHNpZGUgPSB0aGlzLmlzT3V0c2lkZShkYXkpXG5cbiAgICAgIHJldHVybiB0aGlzLiRjcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIGtleTogZGF5LmRhdGUsXG4gICAgICAgIHN0YXRpY0NsYXNzOiAndi1jYWxlbmRhci13ZWVrbHlfX2RheScsXG4gICAgICAgIGNsYXNzOiB0aGlzLmdldFJlbGF0aXZlQ2xhc3NlcyhkYXksIG91dHNpZGUpLFxuICAgICAgICBvbjogdGhpcy5nZXREZWZhdWx0TW91c2VFdmVudEhhbmRsZXJzKCc6ZGF5JywgX2UgPT4gZGF5KSxcbiAgICAgIH0sIFtcbiAgICAgICAgdGhpcy5nZW5EYXlMYWJlbChkYXkpLFxuICAgICAgICAuLi4oZ2V0U2xvdCh0aGlzLCAnZGF5JywgKCkgPT4gKHsgb3V0c2lkZSwgaW5kZXgsIHdlZWssIC4uLmRheSB9KSkgfHwgW10pLFxuICAgICAgXSlcbiAgICB9LFxuICAgIGdlbkRheUxhYmVsIChkYXk6IENhbGVuZGFyVGltZXN0YW1wKTogVk5vZGUge1xuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWNhbGVuZGFyLXdlZWtseV9fZGF5LWxhYmVsJyxcbiAgICAgIH0sIGdldFNsb3QodGhpcywgJ2RheS1sYWJlbCcsIGRheSkgfHwgW3RoaXMuZ2VuRGF5TGFiZWxCdXR0b24oZGF5KV0pXG4gICAgfSxcbiAgICBnZW5EYXlMYWJlbEJ1dHRvbiAoZGF5OiBDYWxlbmRhclRpbWVzdGFtcCk6IFZOb2RlIHtcbiAgICAgIGNvbnN0IGNvbG9yID0gZGF5LnByZXNlbnQgPyB0aGlzLmNvbG9yIDogJ3RyYW5zcGFyZW50J1xuICAgICAgY29uc3QgaGFzTW9udGggPSBkYXkuZGF5ID09PSAxICYmIHRoaXMuc2hvd01vbnRoT25GaXJzdFxuXG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudChWQnRuLCB7XG4gICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgZmFiOiB0cnVlLFxuICAgICAgICAgIGRlcHJlc3NlZDogdHJ1ZSxcbiAgICAgICAgICBzbWFsbDogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgb246IHRoaXMuZ2V0TW91c2VFdmVudEhhbmRsZXJzKHtcbiAgICAgICAgICAnY2xpY2s6ZGF0ZSc6IHsgZXZlbnQ6ICdjbGljaycsIHN0b3A6IHRydWUgfSxcbiAgICAgICAgICAnY29udGV4dG1lbnU6ZGF0ZSc6IHsgZXZlbnQ6ICdjb250ZXh0bWVudScsIHN0b3A6IHRydWUsIHByZXZlbnQ6IHRydWUsIHJlc3VsdDogZmFsc2UgfSxcbiAgICAgICAgfSwgX2UgPT4gZGF5KSxcbiAgICAgIH0sIGhhc01vbnRoXG4gICAgICAgID8gdGhpcy5tb250aEZvcm1hdHRlcihkYXksIHRoaXMuc2hvcnRNb250aHMpICsgJyAnICsgdGhpcy5kYXlGb3JtYXR0ZXIoZGF5LCBmYWxzZSlcbiAgICAgICAgOiB0aGlzLmRheUZvcm1hdHRlcihkYXksIGZhbHNlKVxuICAgICAgKVxuICAgIH0sXG4gICAgZ2VuRGF5TW9udGggKGRheTogQ2FsZW5kYXJUaW1lc3RhbXApOiBWTm9kZSB8IHN0cmluZyB7XG4gICAgICBjb25zdCBjb2xvciA9IGRheS5wcmVzZW50ID8gdGhpcy5jb2xvciA6IHVuZGVmaW5lZFxuXG4gICAgICByZXR1cm4gdGhpcy4kY3JlYXRlRWxlbWVudCgnZGl2JywgdGhpcy5zZXRUZXh0Q29sb3IoY29sb3IsIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6ICd2LWNhbGVuZGFyLXdlZWtseV9fZGF5LW1vbnRoJyxcbiAgICAgIH0pLCBnZXRTbG90KHRoaXMsICdkYXktbW9udGgnLCBkYXkpIHx8IHRoaXMubW9udGhGb3JtYXR0ZXIoZGF5LCB0aGlzLnNob3J0TW9udGhzKSlcbiAgICB9LFxuICB9LFxuXG4gIHJlbmRlciAoaCk6IFZOb2RlIHtcbiAgICByZXR1cm4gaCgnZGl2Jywge1xuICAgICAgc3RhdGljQ2xhc3M6IHRoaXMuc3RhdGljQ2xhc3MsXG4gICAgICBjbGFzczogdGhpcy5jbGFzc2VzLFxuICAgICAgbmF0aXZlT246IHtcbiAgICAgICAgZHJhZ3N0YXJ0OiAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9LCBbXG4gICAgICAhdGhpcy5oaWRlSGVhZGVyID8gdGhpcy5nZW5IZWFkKCkgOiAnJyxcbiAgICAgIC4uLnRoaXMuZ2VuV2Vla3MoKSxcbiAgICBdKVxuICB9LFxufSlcbiJdfQ==