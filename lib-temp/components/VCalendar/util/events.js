import { parseTimestamp, getDayIdentifier, getTimestampIdentifier, OFFSET_TIME, } from './timestamp';
export function parseEvent(input, index, startProperty, endProperty) {
    const start = parseTimestamp(input[startProperty], true);
    const end = (input[endProperty] ? parseTimestamp(input[endProperty], true) : start);
    const startIdentifier = getDayIdentifier(start);
    const startTimestampIdentifier = getTimestampIdentifier(start);
    const endIdentifier = getDayIdentifier(end);
    const endOffset = start.hasTime ? 0 : 2359;
    const endTimestampIdentifier = getTimestampIdentifier(end) + endOffset;
    const allDay = !start.hasTime;
    return { input, start, startIdentifier, startTimestampIdentifier, end, endIdentifier, endTimestampIdentifier, allDay, index };
}
export function isEventOn(event, dayIdentifier) {
    return dayIdentifier >= event.startIdentifier &&
        dayIdentifier <= event.endIdentifier &&
        dayIdentifier * OFFSET_TIME !== event.endTimestampIdentifier;
}
export function isEventStart(event, day, dayIdentifier, firstWeekday) {
    return dayIdentifier === event.startIdentifier || (firstWeekday === day.weekday && isEventOn(event, dayIdentifier));
}
export function isEventOverlapping(event, startIdentifier, endIdentifier) {
    return startIdentifier <= event.endIdentifier && endIdentifier >= event.startIdentifier;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZlbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvVkNhbGVuZGFyL3V0aWwvZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLHNCQUFzQixFQUN0QixXQUFXLEdBQ1osTUFBTSxhQUFhLENBQUE7QUFHcEIsTUFBTSxVQUFVLFVBQVUsQ0FBRSxLQUFvQixFQUFFLEtBQWEsRUFBRSxhQUFxQixFQUFFLFdBQW1CO0lBQ3pHLE1BQU0sS0FBSyxHQUFzQixjQUFjLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFBO0lBQzNFLE1BQU0sR0FBRyxHQUFzQixDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdEcsTUFBTSxlQUFlLEdBQVcsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDdkQsTUFBTSx3QkFBd0IsR0FBVyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQTtJQUN0RSxNQUFNLGFBQWEsR0FBVyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNuRCxNQUFNLFNBQVMsR0FBVyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQTtJQUNsRCxNQUFNLHNCQUFzQixHQUFXLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQTtJQUM5RSxNQUFNLE1BQU0sR0FBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUE7SUFFdEMsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsZUFBZSxFQUFFLHdCQUF3QixFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFBO0FBQy9ILENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFFLEtBQTBCLEVBQUUsYUFBcUI7SUFDMUUsT0FBTyxhQUFhLElBQUksS0FBSyxDQUFDLGVBQWU7UUFDM0MsYUFBYSxJQUFJLEtBQUssQ0FBQyxhQUFhO1FBQ3BDLGFBQWEsR0FBRyxXQUFXLEtBQUssS0FBSyxDQUFDLHNCQUFzQixDQUFBO0FBQ2hFLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFFLEtBQTBCLEVBQUUsR0FBc0IsRUFBRSxhQUFxQixFQUFFLFlBQW9CO0lBQzNILE9BQU8sYUFBYSxLQUFLLEtBQUssQ0FBQyxlQUFlLElBQUksQ0FBQyxZQUFZLEtBQUssR0FBRyxDQUFDLE9BQU8sSUFBSSxTQUFTLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUE7QUFDckgsQ0FBQztBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBRSxLQUEwQixFQUFFLGVBQXVCLEVBQUUsYUFBcUI7SUFDNUcsT0FBTyxlQUFlLElBQUksS0FBSyxDQUFDLGFBQWEsSUFBSSxhQUFhLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQTtBQUN6RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgcGFyc2VUaW1lc3RhbXAsXG4gIGdldERheUlkZW50aWZpZXIsXG4gIGdldFRpbWVzdGFtcElkZW50aWZpZXIsXG4gIE9GRlNFVF9USU1FLFxufSBmcm9tICcuL3RpbWVzdGFtcCdcbmltcG9ydCB7IENhbGVuZGFyVGltZXN0YW1wLCBDYWxlbmRhckV2ZW50LCBDYWxlbmRhckV2ZW50UGFyc2VkIH0gZnJvbSAndHlwZXMnXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV2ZW50IChpbnB1dDogQ2FsZW5kYXJFdmVudCwgaW5kZXg6IG51bWJlciwgc3RhcnRQcm9wZXJ0eTogc3RyaW5nLCBlbmRQcm9wZXJ0eTogc3RyaW5nKTogQ2FsZW5kYXJFdmVudFBhcnNlZCB7XG4gIGNvbnN0IHN0YXJ0OiBDYWxlbmRhclRpbWVzdGFtcCA9IHBhcnNlVGltZXN0YW1wKGlucHV0W3N0YXJ0UHJvcGVydHldLCB0cnVlKVxuICBjb25zdCBlbmQ6IENhbGVuZGFyVGltZXN0YW1wID0gKGlucHV0W2VuZFByb3BlcnR5XSA/IHBhcnNlVGltZXN0YW1wKGlucHV0W2VuZFByb3BlcnR5XSwgdHJ1ZSkgOiBzdGFydClcbiAgY29uc3Qgc3RhcnRJZGVudGlmaWVyOiBudW1iZXIgPSBnZXREYXlJZGVudGlmaWVyKHN0YXJ0KVxuICBjb25zdCBzdGFydFRpbWVzdGFtcElkZW50aWZpZXI6IG51bWJlciA9IGdldFRpbWVzdGFtcElkZW50aWZpZXIoc3RhcnQpXG4gIGNvbnN0IGVuZElkZW50aWZpZXI6IG51bWJlciA9IGdldERheUlkZW50aWZpZXIoZW5kKVxuICBjb25zdCBlbmRPZmZzZXQ6IG51bWJlciA9IHN0YXJ0Lmhhc1RpbWUgPyAwIDogMjM1OVxuICBjb25zdCBlbmRUaW1lc3RhbXBJZGVudGlmaWVyOiBudW1iZXIgPSBnZXRUaW1lc3RhbXBJZGVudGlmaWVyKGVuZCkgKyBlbmRPZmZzZXRcbiAgY29uc3QgYWxsRGF5OiBib29sZWFuID0gIXN0YXJ0Lmhhc1RpbWVcblxuICByZXR1cm4geyBpbnB1dCwgc3RhcnQsIHN0YXJ0SWRlbnRpZmllciwgc3RhcnRUaW1lc3RhbXBJZGVudGlmaWVyLCBlbmQsIGVuZElkZW50aWZpZXIsIGVuZFRpbWVzdGFtcElkZW50aWZpZXIsIGFsbERheSwgaW5kZXggfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudE9uIChldmVudDogQ2FsZW5kYXJFdmVudFBhcnNlZCwgZGF5SWRlbnRpZmllcjogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBkYXlJZGVudGlmaWVyID49IGV2ZW50LnN0YXJ0SWRlbnRpZmllciAmJlxuICAgIGRheUlkZW50aWZpZXIgPD0gZXZlbnQuZW5kSWRlbnRpZmllciAmJlxuICAgIGRheUlkZW50aWZpZXIgKiBPRkZTRVRfVElNRSAhPT0gZXZlbnQuZW5kVGltZXN0YW1wSWRlbnRpZmllclxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFdmVudFN0YXJ0IChldmVudDogQ2FsZW5kYXJFdmVudFBhcnNlZCwgZGF5OiBDYWxlbmRhclRpbWVzdGFtcCwgZGF5SWRlbnRpZmllcjogbnVtYmVyLCBmaXJzdFdlZWtkYXk6IG51bWJlcik6IGJvb2xlYW4ge1xuICByZXR1cm4gZGF5SWRlbnRpZmllciA9PT0gZXZlbnQuc3RhcnRJZGVudGlmaWVyIHx8IChmaXJzdFdlZWtkYXkgPT09IGRheS53ZWVrZGF5ICYmIGlzRXZlbnRPbihldmVudCwgZGF5SWRlbnRpZmllcikpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V2ZW50T3ZlcmxhcHBpbmcgKGV2ZW50OiBDYWxlbmRhckV2ZW50UGFyc2VkLCBzdGFydElkZW50aWZpZXI6IG51bWJlciwgZW5kSWRlbnRpZmllcjogbnVtYmVyKTogYm9vbGVhbiB7XG4gIHJldHVybiBzdGFydElkZW50aWZpZXIgPD0gZXZlbnQuZW5kSWRlbnRpZmllciAmJiBlbmRJZGVudGlmaWVyID49IGV2ZW50LnN0YXJ0SWRlbnRpZmllclxufVxuIl19