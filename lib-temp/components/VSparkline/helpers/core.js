export function genPoints(values, boundary) {
    const { minX, maxX, minY, maxY } = boundary;
    const totalValues = values.length;
    const maxValue = Math.max(...values);
    const minValue = Math.min(...values);
    const gridX = (maxX - minX) / (totalValues - 1);
    const gridY = (maxY - minY) / ((maxValue - minValue) || 1);
    return values.map((value, index) => {
        return {
            x: minX + index * gridX,
            y: maxY -
                (value - minValue) * gridY +
                +(index === totalValues - 1) * 0.00001 -
                +(index === 0) * 0.00001,
            value,
        };
    });
}
export function genBars(values, boundary) {
    const { minX, maxX, minY, maxY } = boundary;
    const totalValues = values.length;
    let maxValue = Math.max(...values);
    let minValue = Math.min(...values);
    if (minValue > 0)
        minValue = 0;
    if (maxValue < 0)
        maxValue = 0;
    const gridX = maxX / totalValues;
    const gridY = (maxY - minY) / (maxValue - minValue);
    const horizonY = maxY - Math.abs(minValue * gridY);
    return values.map((value, index) => {
        const height = Math.abs(gridY * value);
        return {
            x: minX + index * gridX,
            y: horizonY - height +
                +(value < 0) * height,
            height,
            value,
        };
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1ZTcGFya2xpbmUvaGVscGVycy9jb3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sVUFBVSxTQUFTLENBQ3ZCLE1BQWdCLEVBQ2hCLFFBQWtCO0lBRWxCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUE7SUFDM0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNqQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUE7SUFDcEMsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBRXBDLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQy9DLE1BQU0sS0FBSyxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7SUFFMUQsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxFQUFFO1FBQ2pDLE9BQU87WUFDTCxDQUFDLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxLQUFLO1lBQ3ZCLENBQUMsRUFDQyxJQUFJO2dCQUNKLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEtBQUs7Z0JBQzFCLENBQUMsQ0FBQyxLQUFLLEtBQUssV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU87Z0JBQ3RDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEdBQUcsT0FBTztZQUMxQixLQUFLO1NBQ04sQ0FBQTtJQUNILENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQztBQUVELE1BQU0sVUFBVSxPQUFPLENBQ3JCLE1BQWdCLEVBQ2hCLFFBQWtCO0lBRWxCLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUE7SUFDM0MsTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQTtJQUNqQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUE7SUFDbEMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBO0lBRWxDLElBQUksUUFBUSxHQUFHLENBQUM7UUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBQzlCLElBQUksUUFBUSxHQUFHLENBQUM7UUFBRSxRQUFRLEdBQUcsQ0FBQyxDQUFBO0lBRTlCLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxXQUFXLENBQUE7SUFDaEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUE7SUFDbkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFBO0lBRWxELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNqQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQTtRQUV0QyxPQUFPO1lBQ0wsQ0FBQyxFQUFFLElBQUksR0FBRyxLQUFLLEdBQUcsS0FBSztZQUN2QixDQUFDLEVBQUUsUUFBUSxHQUFHLE1BQU07Z0JBQ2xCLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsTUFBTTtZQUN2QixNQUFNO1lBQ04sS0FBSztTQUNOLENBQUE7SUFDSCxDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb2ludCwgQm91bmRhcnksIEJhciB9IGZyb20gJy4uL1ZTcGFya2xpbmUnXG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5Qb2ludHMgKFxuICB2YWx1ZXM6IG51bWJlcltdLFxuICBib3VuZGFyeTogQm91bmRhcnlcbik6IFBvaW50W10ge1xuICBjb25zdCB7IG1pblgsIG1heFgsIG1pblksIG1heFkgfSA9IGJvdW5kYXJ5XG4gIGNvbnN0IHRvdGFsVmFsdWVzID0gdmFsdWVzLmxlbmd0aFxuICBjb25zdCBtYXhWYWx1ZSA9IE1hdGgubWF4KC4uLnZhbHVlcylcbiAgY29uc3QgbWluVmFsdWUgPSBNYXRoLm1pbiguLi52YWx1ZXMpXG5cbiAgY29uc3QgZ3JpZFggPSAobWF4WCAtIG1pblgpIC8gKHRvdGFsVmFsdWVzIC0gMSlcbiAgY29uc3QgZ3JpZFkgPSAobWF4WSAtIG1pblkpIC8gKChtYXhWYWx1ZSAtIG1pblZhbHVlKSB8fCAxKVxuXG4gIHJldHVybiB2YWx1ZXMubWFwKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgeDogbWluWCArIGluZGV4ICogZ3JpZFgsXG4gICAgICB5OlxuICAgICAgICBtYXhZIC1cbiAgICAgICAgKHZhbHVlIC0gbWluVmFsdWUpICogZ3JpZFkgK1xuICAgICAgICArKGluZGV4ID09PSB0b3RhbFZhbHVlcyAtIDEpICogMC4wMDAwMSAtXG4gICAgICAgICsoaW5kZXggPT09IDApICogMC4wMDAwMSxcbiAgICAgIHZhbHVlLFxuICAgIH1cbiAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbkJhcnMgKFxuICB2YWx1ZXM6IG51bWJlcltdLFxuICBib3VuZGFyeTogQm91bmRhcnlcbik6IEJhcltdIHtcbiAgY29uc3QgeyBtaW5YLCBtYXhYLCBtaW5ZLCBtYXhZIH0gPSBib3VuZGFyeVxuICBjb25zdCB0b3RhbFZhbHVlcyA9IHZhbHVlcy5sZW5ndGhcbiAgbGV0IG1heFZhbHVlID0gTWF0aC5tYXgoLi4udmFsdWVzKVxuICBsZXQgbWluVmFsdWUgPSBNYXRoLm1pbiguLi52YWx1ZXMpXG5cbiAgaWYgKG1pblZhbHVlID4gMCkgbWluVmFsdWUgPSAwXG4gIGlmIChtYXhWYWx1ZSA8IDApIG1heFZhbHVlID0gMFxuXG4gIGNvbnN0IGdyaWRYID0gbWF4WCAvIHRvdGFsVmFsdWVzXG4gIGNvbnN0IGdyaWRZID0gKG1heFkgLSBtaW5ZKSAvIChtYXhWYWx1ZSAtIG1pblZhbHVlKVxuICBjb25zdCBob3Jpem9uWSA9IG1heFkgLSBNYXRoLmFicyhtaW5WYWx1ZSAqIGdyaWRZKVxuXG4gIHJldHVybiB2YWx1ZXMubWFwKCh2YWx1ZSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCBoZWlnaHQgPSBNYXRoLmFicyhncmlkWSAqIHZhbHVlKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IG1pblggKyBpbmRleCAqIGdyaWRYLFxuICAgICAgeTogaG9yaXpvblkgLSBoZWlnaHQgK1xuICAgICAgICArKHZhbHVlIDwgMCkgKiBoZWlnaHQsXG4gICAgICBoZWlnaHQsXG4gICAgICB2YWx1ZSxcbiAgICB9XG4gIH0pXG59XG4iXX0=