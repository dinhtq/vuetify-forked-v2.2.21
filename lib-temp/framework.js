import { install } from './install';
// Services
import * as services from './services';
export default class Vuetify {
    constructor(userPreset = {}) {
        this.framework = {};
        this.installed = [];
        this.preset = {};
        this.userPreset = {};
        this.userPreset = userPreset;
        this.use(services.Presets);
        this.use(services.Application);
        this.use(services.Breakpoint);
        this.use(services.Goto);
        this.use(services.Icons);
        this.use(services.Lang);
        this.use(services.Theme);
    }
    // Called on the new vuetify instance
    // bootstrap in install beforeCreate
    // Exposes ssrContext if available
    init(root, ssrContext) {
        this.installed.forEach(property => {
            const service = this.framework[property];
            service.framework = this.framework;
            service.init(root, ssrContext);
        });
        // rtl is not installed and
        // will never be called by
        // the init process
        this.framework.rtl = Boolean(this.preset.rtl);
    }
    // Instantiate a VuetifyService
    use(Service) {
        const property = Service.property;
        if (this.installed.includes(property))
            return;
        // TODO maybe a specific type for arg 2?
        this.framework[property] = new Service(this.preset, this);
        this.installed.push(property);
    }
}
Vuetify.install = install;
Vuetify.installed = false;
Vuetify.version = __VUETIFY_VERSION__;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJhbWV3b3JrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2ZyYW1ld29yay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBYW5DLFdBQVc7QUFDWCxPQUFPLEtBQUssUUFBUSxNQUFNLFlBQVksQ0FBQTtBQUV0QyxNQUFNLENBQUMsT0FBTyxPQUFPLE9BQU87SUFlMUIsWUFBYSxhQUFnQyxFQUFFO1FBUnhDLGNBQVMsR0FBdUMsRUFBRSxDQUFBO1FBRWxELGNBQVMsR0FBYSxFQUFFLENBQUE7UUFFeEIsV0FBTSxHQUFHLEVBQW1CLENBQUE7UUFFNUIsZUFBVSxHQUFzQixFQUFFLENBQUE7UUFHdkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUE7UUFFNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7UUFDMUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdkIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDMUIsQ0FBQztJQUVELHFDQUFxQztJQUNyQyxvQ0FBb0M7SUFDcEMsa0NBQWtDO0lBQ2xDLElBQUksQ0FBRSxJQUFTLEVBQUUsVUFBbUI7UUFDbEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQTtZQUV4QyxPQUFPLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUE7WUFFbEMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDaEMsQ0FBQyxDQUFDLENBQUE7UUFFRiwyQkFBMkI7UUFDM0IsMEJBQTBCO1FBQzFCLG1CQUFtQjtRQUNuQixJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQVEsQ0FBQTtJQUN0RCxDQUFDO0lBRUQsK0JBQStCO0lBQy9CLEdBQUcsQ0FBRSxPQUF1QjtRQUMxQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFBO1FBRWpDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1lBQUUsT0FBTTtRQUU3Qyx3Q0FBd0M7UUFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQVcsQ0FBQyxDQUFBO1FBQ2hFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQy9CLENBQUM7O0FBckRNLGVBQU8sR0FBRyxPQUFPLENBQUE7QUFFakIsaUJBQVMsR0FBRyxLQUFLLENBQUE7QUFFakIsZUFBTyxHQUFHLG1CQUFtQixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW5zdGFsbCB9IGZyb20gJy4vaW5zdGFsbCdcblxuLy8gVHlwZXNcbmltcG9ydCBWdWUgZnJvbSAndnVlJ1xuaW1wb3J0IHtcbiAgVXNlclZ1ZXRpZnlQcmVzZXQsXG4gIFZ1ZXRpZnlQcmVzZXQsXG59IGZyb20gJ3Z1ZXRpZnkvdHlwZXMvc2VydmljZXMvcHJlc2V0cydcbmltcG9ydCB7XG4gIFZ1ZXRpZnlTZXJ2aWNlLFxuICBWdWV0aWZ5U2VydmljZUNvbnRyYWN0LFxufSBmcm9tICd2dWV0aWZ5L3R5cGVzL3NlcnZpY2VzJ1xuXG4vLyBTZXJ2aWNlc1xuaW1wb3J0ICogYXMgc2VydmljZXMgZnJvbSAnLi9zZXJ2aWNlcydcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVnVldGlmeSB7XG4gIHN0YXRpYyBpbnN0YWxsID0gaW5zdGFsbFxuXG4gIHN0YXRpYyBpbnN0YWxsZWQgPSBmYWxzZVxuXG4gIHN0YXRpYyB2ZXJzaW9uID0gX19WVUVUSUZZX1ZFUlNJT05fX1xuXG4gIHB1YmxpYyBmcmFtZXdvcms6IERpY3Rpb25hcnk8VnVldGlmeVNlcnZpY2VDb250cmFjdD4gPSB7fVxuXG4gIHB1YmxpYyBpbnN0YWxsZWQ6IHN0cmluZ1tdID0gW11cblxuICBwdWJsaWMgcHJlc2V0ID0ge30gYXMgVnVldGlmeVByZXNldFxuXG4gIHB1YmxpYyB1c2VyUHJlc2V0OiBVc2VyVnVldGlmeVByZXNldCA9IHt9XG5cbiAgY29uc3RydWN0b3IgKHVzZXJQcmVzZXQ6IFVzZXJWdWV0aWZ5UHJlc2V0ID0ge30pIHtcbiAgICB0aGlzLnVzZXJQcmVzZXQgPSB1c2VyUHJlc2V0XG5cbiAgICB0aGlzLnVzZShzZXJ2aWNlcy5QcmVzZXRzKVxuICAgIHRoaXMudXNlKHNlcnZpY2VzLkFwcGxpY2F0aW9uKVxuICAgIHRoaXMudXNlKHNlcnZpY2VzLkJyZWFrcG9pbnQpXG4gICAgdGhpcy51c2Uoc2VydmljZXMuR290bylcbiAgICB0aGlzLnVzZShzZXJ2aWNlcy5JY29ucylcbiAgICB0aGlzLnVzZShzZXJ2aWNlcy5MYW5nKVxuICAgIHRoaXMudXNlKHNlcnZpY2VzLlRoZW1lKVxuICB9XG5cbiAgLy8gQ2FsbGVkIG9uIHRoZSBuZXcgdnVldGlmeSBpbnN0YW5jZVxuICAvLyBib290c3RyYXAgaW4gaW5zdGFsbCBiZWZvcmVDcmVhdGVcbiAgLy8gRXhwb3NlcyBzc3JDb250ZXh0IGlmIGF2YWlsYWJsZVxuICBpbml0IChyb290OiBWdWUsIHNzckNvbnRleHQ/OiBvYmplY3QpIHtcbiAgICB0aGlzLmluc3RhbGxlZC5mb3JFYWNoKHByb3BlcnR5ID0+IHtcbiAgICAgIGNvbnN0IHNlcnZpY2UgPSB0aGlzLmZyYW1ld29ya1twcm9wZXJ0eV1cblxuICAgICAgc2VydmljZS5mcmFtZXdvcmsgPSB0aGlzLmZyYW1ld29ya1xuXG4gICAgICBzZXJ2aWNlLmluaXQocm9vdCwgc3NyQ29udGV4dClcbiAgICB9KVxuXG4gICAgLy8gcnRsIGlzIG5vdCBpbnN0YWxsZWQgYW5kXG4gICAgLy8gd2lsbCBuZXZlciBiZSBjYWxsZWQgYnlcbiAgICAvLyB0aGUgaW5pdCBwcm9jZXNzXG4gICAgdGhpcy5mcmFtZXdvcmsucnRsID0gQm9vbGVhbih0aGlzLnByZXNldC5ydGwpIGFzIGFueVxuICB9XG5cbiAgLy8gSW5zdGFudGlhdGUgYSBWdWV0aWZ5U2VydmljZVxuICB1c2UgKFNlcnZpY2U6IFZ1ZXRpZnlTZXJ2aWNlKSB7XG4gICAgY29uc3QgcHJvcGVydHkgPSBTZXJ2aWNlLnByb3BlcnR5XG5cbiAgICBpZiAodGhpcy5pbnN0YWxsZWQuaW5jbHVkZXMocHJvcGVydHkpKSByZXR1cm5cblxuICAgIC8vIFRPRE8gbWF5YmUgYSBzcGVjaWZpYyB0eXBlIGZvciBhcmcgMj9cbiAgICB0aGlzLmZyYW1ld29ya1twcm9wZXJ0eV0gPSBuZXcgU2VydmljZSh0aGlzLnByZXNldCwgdGhpcyBhcyBhbnkpXG4gICAgdGhpcy5pbnN0YWxsZWQucHVzaChwcm9wZXJ0eSlcbiAgfVxufVxuIl19